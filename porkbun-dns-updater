#!/bin/bash

helpinfo() {
    echo "porkbun-dns-updater - command line A record updater for porkbun.com."
    echo ""
    echo "Usage: ./porkbun-dns-updater [ARG]"
    echo ""
    echo "Updates IP address of porkbun.com DNS A record using porkbun API and ifconfig.me. Requires jq installed."
    echo "Requires option .json file as argument with the key:VALUE pairs:"
    echo ""
    echo "  \"secretapikey\":       Porkbun secret API key"
    echo "  \"apikey\":             Porkbun API key"
    echo "  \"domain\":             domain (domain.tld)"
    echo "  \"subdomain\":          subdomain"
    echo ""
    echo "Example: ./porkbun-dns-updater \PATH\file.json"
    echo ""
}

jsonreadfail() {
    echo "[PBDU] ERROR: There was a problem reading the .json file. Stopping..."
    exit
}

recordretreivefail() {
    echo "$tag ERROR: There was a problem retrieving the Porkbun A record. Stopping..."
    exit
}

ifconfigfail() {
    echo "$tag ERROR: There was a problem communicating with ifconfig.me. Stopping..."
    exit
}

if [[ -z $1 ]]; then

    helpinfo
    exit

fi

file=$(<$1)

secretapikey=$(jq '.secretapikey' <<< $file) || jsonreadfail
secretapikey="${secretapikey//\"}"
apikey=$(jq '.apikey' <<< $file) || jsonreadfail
apikey="${apikey//\"}"
domain=$(jq '.domain' <<< $file) || jsonreadfail
domain="${domain//\"}"
# type=$(jq '.type' <<< $file) || jsonreadfail
# type="${type//\"}"
type="A"
subdomain=$(jq '.subdomain' <<< $file) || jsonreadfail
subdomain="${subdomain//\"}"

if [[ $subdomain == "" ]]; then
    dot=""
    else
    dot="."
fi

fulldomain=$subdomain$dot$domain
tag="[PBDU \"$fulldomain\"]"

payload_json=$(
    jq --null-input \
        --arg secretapikey "$secretapikey" \
        --arg apikey "$apikey" \
        '$ARGS.named'
)

echo "$tag Retrieving IP addresses..."

response_json=$(curl -s -X POST -H "Content-Type: application/json" -d "$payload_json" https://api.porkbun.com/api/json/v3/dns/retrieveByNameType/$domain/$type/$subdomain)
response=$(jq '.status' <<< "$response_json")
if [[ $response != "\"SUCCESS\"" ]] ; then
    recordretreivefail
fi

oldip=$(jq '.records[]' <<< "$response_json" | jq '.content')
oldip="${oldip//\"}"
echo "$tag Porkbun A record: $oldip"

newip=$(curl -s ifconfig.me) 
echo "$tag Current IP address: $newip" || ifconfigfail
if [[ $newip == $oldip ]] ; then
    echo "$tag IP address has not changed. Stopping..."
    exit
    elif [[ $newip =~ [^0-9.] ]]; then
    echo "$tag New IP address looks strange. Stopping..." 
    exit
fi

update_json=$(
    jq --null-input \
        --arg secretapikey "$secretapikey" \
        --arg apikey "$apikey" \
        --arg content "$newip" \
        '$ARGS.named'
)
echo "$tag Created new A record JSON payload."

result_json=$(curl -s -X POST -H "Content-Type: application/json" -d "$update_json" https://api.porkbun.com/api/json/v3/dns/editByNameType/$domain/$type/$subdomain)
result=$(jq '.status' <<< "$result_json")

if [[ $result == "\"SUCCESS\"" ]] ; then
    echo "$tag SUCCESS: Updated Porkbun A record for $fulldomain."
    exit
    else
    echo "$tag ERROR: Something went wrong."
    exit
fi
